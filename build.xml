<project name="Om" basedir="." default="all">
 
  <description>
    Builds the Om (OpenMark) project.
  </description>
	
  <!-- 
		If building the equationgrammar target (not necessary unless altering
		grammar), you need to install JavaCC and put its location here 
	-->
  <property name="javacchome" value=""/>
	
	<!-- Specify the desired build folder -->
	<property name="build" value="/tmp/om-build"/>
	
	<!-- Version number -->
	<property name="buildversion" value="1.3.0 (M46)"/>
	
	<!-- 
		Modify JDK home if necessary - this sets the default for the developer
		servlet, to make life easier for question developers. 
		-->
	<property name="jdkhome" value="${java.home}"/>

	<!-- 
		Modify Ant home if necessary - this sets the default for the developer
		servlet, to make life easier for question developers. Should point to
		an Ant 1.7 install on developer machines.
		-->
	<property name="anthome" value="${ant.home}"/>
	
	<!--
	  Modify Axis home. Should point to an Axis 1.4 install on the build 
	  machine. Used to obtain Axis lib files.
	  -->
  <property name="axishome" value=""/>
	
	<!--
	  Set location for Java Activation Framework install, used for activation.jar.
	  -->
	<property name="jafhome" value=""/>
	
	<!--
	  Set location for Java Mail install, used for mail.jar.
	  -->
	<property name="javamailhome" value=""/>
	
  	<!--
  	  Provide location for the servlet-api.jar file. If you are using Tomcat,
  	  this should be set to [tomcathome]/common/lib
  	  -->
	<property name="servletapi" value=""/>
	
	<!--
	  Alter where the results of the 'javadoc' target are built to.
	  -->
	<property name="javadoc" value="${build}/javadoc"/>
	
	<!-- Create fresh build folder -->
	<target name="init">
		<tstamp>
			<format property="buildstamp" pattern="yyyy-MM-dd HH:mm:ss"/>
		</tstamp>
		<delete dir="${build}" quiet="true"/>
		<mkdir dir="${build}"/>
	</target>

  
  <!-- Compile Java source -->
  <target name="compile" depends="init">
		
		<mkdir dir="${build}/compiled"/>
		
    <!-- Compile everything -->    
    <javac srcdir="src" destdir="${build}/compiled" debug="on" source="1.4" target="1.4">
			<!-- Include all lib files -->
			<classpath>
	      <fileset dir="${servletapi}">
	        <include name="servlet-api.jar"/>
	      </fileset>
				<fileset dir="${axishome}/lib">
					<include name="*.jar"/>
				</fileset>
				<fileset dir="${jafhome}">
					<include name="activation.jar"/>
				</fileset>
				<fileset dir="${javamailhome}">
					<include name="mail.jar"/>
				</fileset>
	    </classpath>
    </javac>
		
  </target>
	

	<!-- Copy data files from source to build folder -->
	<target name="copydata">
	
  	<!-- Copy actual data -->
		<copy todir="${build}/compiled">
			<fileset dir="src">
				<exclude name="**/*.java"/>
				<exclude name="**/package.html"/>
			</fileset>
		</copy>
		
		<!-- Write version file -->
		<echo file="${build}/compiled/om/version.txt" append="false" >${buildversion}|${buildstamp}</echo>
		
  </target>		
	
	
	<!-- Create jar files -->
	<target name="jar" depends="compile,copydata">
		
		<mkdir dir="${build}/jars"/>
		
    <jar jarfile="${build}/jars/om-dev.jar" basedir="${build}/compiled">
			<include name="om/*"/>
			<include name="om/devservlet/"/>
			<include name="om/equation/"/>
			<include name="om/graph/"/>
			<include name="om/helper/"/>
			<include name="om/question/"/>
			<include name="om/stdcomponent/"/>
			<include name="om/stdquestion/"/>
			<include name="util/"/>			
    </jar>
		
    <jar jarfile="${build}/jars/om-engine.jar" basedir="${build}/compiled">
			<include name="om/*"/>
			<include name="om/equation/"/>
			<include name="om/graph/"/>
			<include name="om/helper/"/>
			<include name="om/qengine/"/>
			<include name="om/question/"/>
			<include name="om/stdcomponent/"/>
			<include name="om/stdquestion/"/>
			<include name="util/"/>			
    </jar>

    <jar jarfile="${build}/jars/om-navigator.jar" basedir="${build}/compiled">
			<include name="om/*"/>
			<include name="om/axis/qengine/"/>
			<include name="om/tnavigator/"/>
			<include name="util/"/>			
    </jar>

	</target>
	
	
	<!-- Build development server webapp -->
	<target name="devserver" depends="jar">
		
		<mkdir dir="${build}/devserver/om"/>
		<mkdir dir="${build}/devserver/om/WEB-INF"/>
		<mkdir dir="${build}/devserver/om/WEB-INF/lib"/>
		
		<!-- Copy most of webinf -->
		<copy todir="${build}/devserver/om/WEB-INF">
			<fileset dir="webinf-dev">
				<exclude name="web.xml"/>
			</fileset>
		</copy>
		<!-- Copy web.xml but fill in JDKHOME -->
		<copy todir="${build}/devserver/om/WEB-INF">
			<fileset dir="webinf-dev">
				<include name="web.xml"/>
			</fileset>
		
		  <filterset>
				<filter token="JDKHOME" value="${jdkhome}"/>
				<filter token="ANTHOME" value="${anthome}"/>
			</filterset>
		</copy>
		<!-- To avoid duplicating code, grab labels from test nav -->
		<copy todir="${build}/devserver/om/WEB-INF">
			<fileset dir="webinf-tnavigator">
				<include name="labels/**"/>
			</fileset>
		</copy>

		<copy todir="${build}/devserver/om/WEB-INF/lib" file="${build}/jars/om-dev.jar"/>
		
    <jar jarfile="${build}/devserver/om.war" basedir="${build}/devserver/om"/>
	</target>
	
	
	<!-- Build question engine webapp -->	
	<target name="qengine" depends="jar">
		
		<mkdir dir="${build}/webapps/om-qe"/>
		<mkdir dir="${build}/webapps/om-qe/WEB-INF"/>
		<mkdir dir="${build}/webapps/om-qe/WEB-INF/lib"/>
		<mkdir dir="${build}/webapps/om-qe/questioncache"/>
		
		<copy todir="${build}/webapps/om-qe/WEB-INF">
			<fileset dir="webinf-qengine">
				<include name="*"/>
			</fileset>
		</copy>
		
		<copy todir="${build}/webapps/om-qe/WEB-INF/lib">
			<fileset dir="${axishome}/lib">
				<include name="*.jar"/>
			</fileset>
		</copy>
		<copy todir="${build}/webapps/om-qe/WEB-INF/lib" file="${build}/jars/om-engine.jar"/>
		
    <jar jarfile="${build}/webapps/om-qe.war" basedir="${build}/webapps/om-qe"/>
		
	</target>
	
	
	<!-- Build test navigator webapp -->
	<target name="tnavigator" depends="jar">
		
		<mkdir dir="${build}/webapps/om-tn"/>
		<mkdir dir="${build}/webapps/om-tn/WEB-INF"/>
		<mkdir dir="${build}/webapps/om-tn/WEB-INF/lib"/>
		<mkdir dir="${build}/webapps/om-tn/logs"/>
		
		<copy todir="${build}/webapps/om-tn/WEB-INF">
			<fileset dir="webinf-tnavigator">
				<include name="**/*"/>
			</fileset>
		</copy>
		<!-- Sample navigator.xml doesn't go in web-inf -->
		<move file="${build}/webapps/om-tn/WEB-INF/navigator.sample.xml"
			todir="${build}/webapps/om-tn/"/>
		
		<!-- Copy sample tests -->
		<copy todir="${build}/webapps/om-tn/">
			<fileset dir="samples/tests">
				<include name="**/*"/>
			</fileset>
		</copy>

		<copy todir="${build}/webapps/om-tn/WEB-INF/lib">
			<fileset dir="${axishome}/lib">
				<include name="*.jar"/>
			</fileset>
			<fileset dir="${jafhome}">
				<include name="activation.jar"/>
			</fileset>
			<fileset dir="${javamailhome}">
				<include name="mail.jar"/>
			</fileset>
		</copy>
		<copy todir="${build}/webapps/om-tn/WEB-INF/lib" file="${build}/jars/om-navigator.jar"/>
		
    <jar jarfile="${build}/webapps/om-tn.war" basedir="${build}/webapps/om-tn"/>
		
	</target>

	
	<target name="all" depends="qengine,tnavigator,devserver" 
		description="Build question engine, test navigator, and devserver webapps"/>
	
	
	<path id="axis.classpath">
		<fileset dir="${axishome}/lib">
			<include name="*.jar"/>
		</fileset>
		<fileset dir="/">
			<!-- the * here stops it from making the ant script die if the folder doesn't exist -->
			<include name="${build}*/jars*/om-engine.jar"/>			
		</fileset>
	</path>
	<taskdef resource="axis-tasks.properties" classpathref="axis.classpath"/>


	<!-- Standalone target: not built by all -->
	<target name="stubs-qengine" depends="init" description="Create question engine stubs using Apache Axis">

		<delete dir="${build}/axis/src"/>
		<mkdir dir="${build}/axis/src"/>
		
		<axis-wsdl2java 
			output="${build}/axis/src" 
			url="http://localhost:8080/om-qe/services/Om?wsdl">
			<mapping namespace="http://om.open.ac.uk/" package="om.axis.qengine"/>
		</axis-wsdl2java>
		
		<fail message="Axis failed">
			<condition>
				<not>
					<available file="${build}/axis/src/om" type="dir"/>				
				</not>
			</condition>
		</fail>
		
		<delete quiet="true">
			<fileset dir="src/om/axis/qengine" excludes="cvs"/>			
		</delete>		
		<copy todir="src">
			<fileset dir="${build}/axis/src">
				<include name="om/axis/qengine/*.java"/>
			</fileset>
		</copy>

	</target>

	
	<!-- Standalone target: not built by all -->
  <target name="equationgrammar" description="Build generated grammar for equations"
		depends="init">
		
		<mkdir dir="${build}/equationgrammar"/>
		
		<!-- Build grammar in temp -->
		<jjtree target="src/om/equation/grammar.jjt" javacchome="${javacchome}"
			outputdirectory="${build}/equationgrammar" outputfile="grammar.jj"/>
		<javacc target="${build}/equationgrammar/grammar.jj" javacchome="${javacchome}"
			outputdirectory="${build}/equationgrammar"/>
		
		<!-- Copy it to appropriate location in source tree -->
		<delete quiet="true">
			<fileset dir="src/om/equation/generated" excludes="cvs"/>			
		</delete>		
		<mkdir dir="src/om/equation/generated"/>		
		<copy todir="src/om/equation/generated">
			<fileset dir="${build}/equationgrammar" includes="*.java"/>
		</copy>
		<!-- Delete this because we used our own version that isn't in generated package -->
		<delete file="src/om/equation/generated/SimpleNode.java"/>
		
	</target>


	<!-- Standalone target: not built by all -->
	<target name="javadoc" description="Generate javadoc">
		
		<delete quiet="true">
	    <fileset dir="${javadoc}">			
				<include name="**/*"/>
				<exclude name="**/cvs/"/>
				<exclude name="**/cvs"/>
			</fileset>
		</delete>

		<mkdir dir="${javadoc}"/>
		
		<javadoc sourcepath="src" destdir="${javadoc}" source="1.4"
			packagenames="om.*,util.*"
			excludepackagenames="om.equation.generated.*,om.axis.*">
			<classpath>
	      <fileset dir="${servletapi}">
	        <include name="servlet-api.jar"/>
	      </fileset>    
				<fileset dir="${axishome}/lib">
					<include name="*.jar"/>
				</fileset>
				<fileset dir="${jafhome}">
					<include name="activation.jar"/>
				</fileset>
				<fileset dir="${javamailhome}">
					<include name="mail.jar"/>
				</fileset>
	    </classpath>
		</javadoc>

	</target>
	
	
</project>