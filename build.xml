<project name="Om" basedir="." default="all">

	<description>
		Builds the Om (OpenMark) project. Use the 'all' target to build all webapps
		including required libraries. Use 'all-nolibs' if you are going to install
		the required libraries (Apache Axis plus mail.jar and activation.jar from
		J2EE) elsewhere in your application server.
	</description>

	<!-- Overridden build properties. We must load these first since <propery>
		 task only sets things that have not already been set. -->
	<property file="build.local.properties"/>

	<!-- Build properties -->
	<property file="build.properties"/>

	<!-- Version number - loaded into ${buildversion} -->
	<property file="version.properties"/>


	<!-- Create fresh build folder -->
	<target name="init">
		<tstamp>
			<format property="newbuildstamp" pattern="yyyy-MM-dd HH:mm:ss"/>
		</tstamp>
		<condition property="buildstamp" value="${buildstamp}" else="${newbuildstamp}">
			<isset property="${buildstamp}"/>
		</condition>
		<delete dir="${build}" quiet="true"/>
		<mkdir dir="${build}"/>
	</target>


	<!-- Compile Java source -->
	<target name="compile" depends="init">

		<mkdir dir="${build}/compiled"/>

		<!-- Compile everything -->
		<javac srcdir="src" destdir="${build}/compiled" debug="on" source="1.8" target="1.8"
				encoding="UTF-8" includeantruntime="false">
			<!-- Include all lib files -->
			<classpath>
				<fileset dir="${servletapi}">
					<include name="servlet-api.jar"/>
				</fileset>
				<fileset dir="${axishome}/lib">
					<include name="*.jar"/>
				</fileset>
				<fileset dir="${jafhome}">
					<include name="activation.jar"/>
				</fileset>
				<fileset dir="${jeuclidhome}">
					<include name="*.jar"/>
				</fileset>
				<fileset dir="${jazzyhome}">
					<include name="*.jar"/>
				</fileset>
				<fileset dir="${javamailhome}">
					<include name="mail.jar"/>
				</fileset>
			</classpath>
		</javac>
	</target>

	<!-- Copy data files from source to build folder -->
	<target name="copydata">

		<!-- Copy actual data -->
		<copy todir="${build}/compiled">
			<fileset dir="src">
				<exclude name="**/*.java"/>
				<exclude name="**/package.html"/>
			</fileset>
		</copy>

		<!-- Write version file -->
		<propertyfile file="${build}/compiled/om/version.properties">
			<entry key="buildversion" value="${buildversion}"/>
			<entry key="buildinfo" value="${buildstamp}"/>
		</propertyfile>
	</target>

	<!-- Classpath for JUnit tests -->
	<path id="test.classpath">
		<pathelement location="${build}/compiled" />
		<fileset dir="lib">
			<include name="**/*.jar"/>
		</fileset>
	</path>

	<!-- Run JUnit tests -->
	<target name="test" depends="compile" unless="skipunittest.enabled">
		<!-- Compile and copy all test code -->
		<mkdir dir="${build}/testclasses" />
		<mkdir dir="${build}/testresults" />
		<javac destdir="${build}/testclasses"
			source="1.8" target="1.8" encoding="UTF-8" debug="true"
			classpathref="test.classpath" includeantruntime="false">
			<src>
				<pathelement path="test"/>
			</src>
		</javac>
		<copy todir="${build}/testclasses">
			<fileset dir="test">
				<exclude name="**/*.java" />
			</fileset>
		</copy>

		<!-- Run JUnit -->
		<junit fork="on" printsummary="on" failureproperty="junit.failed" dir="${build}/testclasses">
			<formatter type="xml"/>
			<classpath>
				<path refid="test.classpath"/>
				<pathelement location="${build}/testclasses"/>
			</classpath>
			<batchtest todir="${build}/testresults">
				<fileset dir="test">
					<!-- The files in test have really crappy inconsistent names :-( -->
					<include name="**/*Test*.java"/>
					<exclude name="**/*Abstract*.java"/>
					<exclude name="**/JUnitTestCase*.java"/>
					<exclude name="**/TestCaseServletContext.java"/>
					<exclude name="**/TestLabelSet.java"/>
					<exclude name="**/TestUserCreator.java"/>
				</fileset>
			</batchtest>
		</junit>
		<fail if="junit.failed" message="Stopping the build because some unit tests failed."/>
	</target>

	<!-- Create jar files -->
	<target name="jar" depends="compile, copydata, test">

		<mkdir dir="${build}/jars"/>

		<jar jarfile="${build}/jars/om-dev.jar" basedir="${build}/compiled">
			<include name="om/*"/>
			<include name="om/abstractservlet/"/>
			<include name="om/devservlet/"/>
			<include name="om/equation/"/>
			<include name="om/graph/"/>
			<include name="om/helper/"/>
			<include name="om/qengine/"/>
			<include name="om/question/"/>
			<include name="om/stdcomponent/"/>
			<include name="om/stdquestion/"/>
			<include name="util/"/>
			<include name="om/tnavigator/request/tinymce/" />
		</jar>

		<jar jarfile="${build}/jars/om-engine.jar" basedir="${build}/compiled">
			<include name="om/*"/>
			<include name="om/equation/"/>
			<include name="om/graph/"/>
			<include name="om/helper/"/>
			<include name="om/qengine/"/>
			<include name="om/question/"/>
			<include name="om/stdcomponent/*"/>
			<include name="om/stdquestion/"/>
			<include name="om/getOucuInfo/"/>
			<include name="util/"/>
		</jar>

		<jar jarfile="${build}/jars/om-navigator.jar" basedir="${build}/compiled">
			<include name="om/*"/>
			<include name="om/abstractservlet/"/>
			<include name="om/axis/qengine/"/>
			<include name="om/tnavigator/"/>
			<include name="om/getOucuInfo/"/>
			<include name="util/"/>
		</jar>

		<jar jarfile="${build}/jars/om-administration.jar" basedir="${build}/compiled">
			<include name="om/*"/>
			<include name="om/abstractservlet/*"/>
			<include name="om/administration/*"/>
			<include name="om/administration/extraction/*"/>
			<include name="om/administration/questionbank/*"/>
			<include name="om/administration/databaseCleaner/*"/>
			<include name="om/administration/dataDeletion/*"/>
			<include name="om/administration/simpleSQLReporter/*"/>
			<include name="om/axis/qengine/"/>
			<include name="om/tnavigator/"/>
			<include name="om/getOucuInfo/"/>
			<include name="util/"/>
		</jar>

	</target>


	<!-- Build development server webapp -->
	<target name="devserver" depends="jar">

		<mkdir dir="${build}/webapps/om"/>
		<mkdir dir="${build}/webapps/om/WEB-INF"/>
		<mkdir dir="${build}/webapps/om/WEB-INF/lib"/>
		<mkdir dir="${build}/webapps/om/questions"/>

		<mkdir dir="${build}/webapps/om/WEB-INF/shared"/>

		<!-- Copy most of webinf -->
		<copy todir="${build}/webapps/om/WEB-INF">
			<fileset dir="webinf-dev">
				<exclude name="web.xml"/>
			</fileset>
		</copy>
		<!-- Copy web.xml but fill in JDKHOME -->
		<copy todir="${build}/webapps/om/WEB-INF">
			<fileset dir="webinf-dev">
				<include name="web.xml"/>
			</fileset>

			<filterset>
				<filter token="JDKHOME" value="${jdkhome}"/>
				<filter token="ANTHOME" value="${anthome}"/>
			</filterset>
		</copy>
		<!-- To avoid duplicating code, grab labels from test nav -->
		<copy todir="${build}/webapps/om/WEB-INF">
			<fileset dir="webinf-tnavigator">
				<include name="labels/**"/>
			</fileset>
		</copy>

		<copy todir="${build}/webapps/om/WEB-INF/lib">
			<fileset dir="${jeuclidhome}">
				<include name="*.jar"/>
			</fileset>
			<fileset dir="${jazzyhome}">
				<include name="*.jar"/>
			</fileset>
		</copy>

		<!-- TINY MCE from tnavigator -->
		<copy todir="${build}/webapps/om/WEB-INF/shared">
			<fileset dir="webinf-tnavigator/shared">
				<include name="tiny_mce/**"/>
				<include name="jsme/**"/>
				<include name="ousupsub/**"/>
			</fileset>
		</copy>

		<copy todir="${build}/webapps/om/WEB-INF/lib" file="${build}/jars/om-dev.jar"/>

		<jar jarfile="${build}/webapps/om.war" basedir="${build}/webapps/om"/>

	</target>


	<!-- Build question engine webapp -->
	<target name="qengine-base" depends="jar">

		<mkdir dir="${build}/webapps/om-qe"/>
		<mkdir dir="${build}/webapps/om-qe/WEB-INF"/>
		<mkdir dir="${build}/webapps/om-qe/WEB-INF/lib"/>

		<copy todir="${build}/webapps/om-qe/WEB-INF">
			<fileset dir="webinf-qengine">
				<include name="*"/>
			</fileset>
		</copy>

		<copy todir="${build}/webapps/om-qe/WEB-INF/lib" file="${build}/jars/om-engine.jar"/>

	</target>


	<target name="qengine-nolibs" depends="qengine-base">
		<jar jarfile="${build}/webapps/om-qe.war" basedir="${build}/webapps/om-qe"/>
	</target>


	<target name="qengine" depends="qengine-base">
		<copy todir="${build}/webapps/om-qe/WEB-INF/lib">
			<fileset dir="${axishome}/lib">
				<include name="*.jar"/>
				<exclude name="saaj.jar"/>
			</fileset>
			<fileset dir="${jeuclidhome}">
				<include name="*.jar"/>
			</fileset>
			<fileset dir="${jazzyhome}">
				<include name="*.jar"/>
			</fileset>
		</copy>
		<jar jarfile="${build}/webapps/om-qe.war" basedir="${build}/webapps/om-qe"/>

	</target>


	<!-- Build test navigator webapp -->
	<target name="tnavigator-base" depends="jar">

		<mkdir dir="${build}/webapps/om-tn"/>
		<mkdir dir="${build}/webapps/om-tn/WEB-INF"/>
		<mkdir dir="${build}/webapps/om-tn/WEB-INF/lib"/>

		<copy todir="${build}/webapps/om-tn/WEB-INF">
			<fileset dir="webinf-tnavigator"/>
		</copy>

		<copy todir="${build}/webapps/om-tn/WEB-INF/lib" file="${build}/jars/om-navigator.jar"/>

		<jar jarfile="${build}/webapps/om-tn.war" basedir="${build}/webapps/om-tn">
			<include name="**"/>
		</jar>
	</target>


	<target name="tnavigator-nolibs" depends="tnavigator-base">
		<jar jarfile="${build}/webapps/om-tn.war" basedir="${build}/webapps/om-tn">
			<include name="**"/>
		</jar>
	</target>


	<target name="tnavigator" depends="tnavigator-base">
		<copy todir="${build}/webapps/om-tn/WEB-INF/lib">
			<fileset dir="${axishome}/lib">
				<include name="*.jar"/>
				<exclude name="saaj.jar"/>
			</fileset>
			<fileset dir="${jeuclidhome}">
				<include name="*.jar"/>
			</fileset>
			<fileset dir="${jazzyhome}">
				<include name="*.jar"/>
			</fileset>
			<fileset dir="${jafhome}">
				<include name="activation.jar"/>
			</fileset>
			<fileset dir="${javamailhome}">
				<include name="mail.jar"/>
			</fileset>
			<fileset dir="${xerceshome}">
				<include name="*.jar"/>
			</fileset>
			<fileset dir="${sqlserverhome}">
				<include name="*.jar"/>
			</fileset>
			<fileset dir="${postgresqlhome}">
				<include name="*.jar"/>
			</fileset>
		</copy>
		<jar jarfile="${build}/webapps/om-tn.war" basedir="${build}/webapps/om-tn">
			<include name="**"/>
		</jar>
		<copy file="${build}/webapps/om-tn.war" tofile="${build}/webapps/openmark.war"/>
	</target>


	<!-- Build test navigator webapp -->
	<target name="adminserver-base" depends="jar">

		<mkdir dir="${build}/webapps/om-admin"/>
		<mkdir dir="${build}/webapps/om-admin/WEB-INF"/>
		<mkdir dir="${build}/webapps/om-admin/WEB-INF/lib"/>
		<mkdir dir="${build}/webapps/om-admin/logs"/>

		<copy todir="${build}/webapps/om-admin/WEB-INF">
			<fileset dir="webinf-administration"/>
		</copy>

		<copy todir="${build}/webapps/om-admin/WEB-INF">
			<fileset dir="webinf-administration"/>
		</copy>
		<!-- Sample navigator.xml doesn't go in web-inf -->
		<move file="${build}/webapps/om-admin/WEB-INF/navigator.sample.xml"
			todir="${build}/webapps/om-admin/"/>

		<move file="${build}/webapps/om-admin/WEB-INF/requestHandling.xml"
			todir="${build}/webapps/om-admin/"/>

		<copy tofile="${build}/webapps/om-admin/navigator.css" file="webinf-tnavigator/templates/navigator.css"/>

		<copy todir="${build}/webapps/om-admin/WEB-INF/lib" file="${build}/jars/om-navigator.jar"/>

		<copy todir="${build}/webapps/om-admin/WEB-INF/lib" file="${build}/jars/om-administration.jar"/>

		<jar jarfile="${build}/webapps/om-admin.war" basedir="${build}/webapps/om-admin">
			<include name="**"/>
		</jar>

	</target>


	<target name="adminserver" depends="adminserver-base">
		<copy todir="${build}/webapps/om-admin/WEB-INF/lib">
			<fileset dir="${axishome}/lib">
				<include name="*.jar"/>
			</fileset>
			<fileset dir="${jeuclidhome}">
				<include name="*.jar"/>
			</fileset>
			<fileset dir="${jazzyhome}">
				<include name="*.jar"/>
			</fileset>
			<fileset dir="${jafhome}">
				<include name="activation.jar"/>
			</fileset>
			<fileset dir="${javamailhome}">
				<include name="mail.jar"/>
			</fileset>
			<fileset dir="${xerceshome}">
				<include name="*.jar"/>
			</fileset>
			<fileset dir="${sqlserverhome}">
				<include name="*.jar"/>
			</fileset>
			<fileset dir="${postgresqlhome}">
				<include name="*.jar"/>
			</fileset>
		</copy>
		<jar jarfile="${build}/webapps/om-admin.war" basedir="${build}/webapps/om-admin">
			<include name="**"/>
		</jar>
	</target>

	<target name="all" depends="qengine, tnavigator, adminserver, devserver"
		description="Build question engine, test navigator, administrator and devserver webapps"/>

	<target name="all-nolibs" depends="qengine-nolibs, tnavigator-nolibs, devserver"
		description="Build question engine, test navigator, and devserver webapps without external libraries"/>

	<target name="localhost-install" depends="all, update-localhost"
		description="Rebuild everything, and update the localhost install."/>

	<target name="update-localhost"
		description="Copy the compiled files code into a localhost tomcat install.">
		<copy todir="${localhostwebapps}"
				file="${build}/webapps/om-tn.war"/>
		<copy todir="${localhostwebapps}"
				file="${build}/webapps/om-qe.war"/>
		<delete dir="${localhostwebapps}/om/WEB-INF"/>
		<copy todir="${localhostwebapps}/om/WEB-INF">
			<fileset dir="${build}/webapps/om/WEB-INF/"/>
		</copy>
		<delete dir="${localhostwebapps}/om-admin/WEB-INF"/>
		<copy todir="${localhostwebapps}/om-admin/WEB-INF">
			<fileset dir="${build}/webapps/om-admin/WEB-INF/"/>
		</copy>
	</target>

	<target name="bundle-source"
		description="Bundle the source for upload to the project site.">
		<zip destfile="${build}/openmark_${buildversion}_src.zip">
			<fileset dir=".">
				<exclude name="bin/**"/>
				<exclude name="trunk-archive/**"/>
				<exclude name="deploy.xml"/>
			</fileset>
		</zip>
	</target>

	<path id="axis.classpath">
		<fileset dir="${axishome}/lib">
			<include name="*.jar"/>
		</fileset>
		<fileset dir="/">
			<!-- the * here stops it from making the ant script die if the folder doesn't exist -->
			<include name="${build}*/jars*/om-engine.jar"/>
		</fileset>
	</path>
	<!-- The next line may show as a warning because axishome isn't set. -->
	<taskdef resource="axis-tasks.properties" classpathref="axis.classpath"/>


	<!-- Standalone target: not built by all -->
	<target name="stubs-qengine" depends="init" description="Create question engine stubs using Apache Axis">

		<delete dir="${build}/axis/src"/>
		<mkdir dir="${build}/axis/src"/>

		<axis-wsdl2java
			output="${build}/axis/src"
			url="http://localhost:8080/om-qe/services/Om?wsdl">
			<mapping namespace="http://om.open.ac.uk/" package="om.axis.qengine"/>
		</axis-wsdl2java>

		<fail message="Axis failed">
			<condition>
				<not>
					<available file="${build}/axis/src/om" type="dir"/>
				</not>
			</condition>
		</fail>

		<delete quiet="true">
			<fileset dir="src/om/axis/qengine" excludes="cvs"/>
		</delete>
		<copy todir="src">
			<fileset dir="${build}/axis/src">
				<include name="om/axis/qengine/*.java"/>
			</fileset>
		</copy>

	</target>


	<!-- Standalone target: not built by all -->
	<target name="equationgrammar" description="Build generated grammar for equations"
		depends="init">

		<mkdir dir="${build}/equationgrammar"/>

		<!-- Build grammar in temp -->
		<jjtree target="src/om/equation/grammar.jjt" javacchome="${javacchome}"
			outputdirectory="${build}/equationgrammar" outputfile="grammar.jj"/>
		<javacc target="${build}/equationgrammar/grammar.jj" javacchome="${javacchome}"
			outputdirectory="${build}/equationgrammar"/>

		<!-- Copy it to appropriate location in source tree -->
		<delete quiet="true">
			<fileset dir="src/om/equation/generated" excludes="cvs"/>
		</delete>
		<mkdir dir="src/om/equation/generated"/>
		<copy todir="src/om/equation/generated">
			<fileset dir="${build}/equationgrammar" includes="*.java"/>
		</copy>
		<!-- Delete this because we used our own version that isn't in generated package -->
		<delete file="src/om/equation/generated/SimpleNode.java"/>

	</target>


	<!-- Standalone target: not built by all -->
	<target name="javadoc" description="Generate javadoc">

		<delete quiet="true">
			<fileset dir="${javadoc}"/>
		</delete>

		<mkdir dir="${javadoc}"/>

		<javadoc sourcepath="src" destdir="${javadoc}" source="1.8" encoding="UTF-8"
			packagenames="om.*, util.*"
			excludepackagenames="om.equation.generated.*, om.axis.*">
			<classpath>
				<fileset dir="${servletapi}">
					<include name="servlet-api.jar"/>
				</fileset>
				<fileset dir="${axishome}/lib">
					<include name="*.jar"/>
				</fileset>
				<fileset dir="${jeuclidhome}">
					<include name="*.jar"/>
				</fileset>
				<fileset dir="${jazzyhome}">
					<include name="*.jar"/>
				</fileset>
				<fileset dir="${jafhome}">
					<include name="activation.jar"/>
				</fileset>
				<fileset dir="${javamailhome}">
					<include name="mail.jar"/>
				</fileset>
			</classpath>
		</javadoc>
	</target>

</project>